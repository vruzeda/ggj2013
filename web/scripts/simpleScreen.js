// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["kinetic", "framework/screen"], function(Kinetic, Screen) {
    var SimpleScreen;
    SimpleScreen = (function(_super) {
      var NUMBER_OF_RECTS;

      __extends(SimpleScreen, _super);

      function SimpleScreen() {
        this.onRectClick = __bind(this.onRectClick, this);
        return SimpleScreen.__super__.constructor.apply(this, arguments);
      }

      NUMBER_OF_RECTS = 10;

      SimpleScreen.prototype._constructLayout = function() {
        var rect, rectIndex, _i, _results;
        _results = [];
        for (rectIndex = _i = 1; 1 <= NUMBER_OF_RECTS ? _i <= NUMBER_OF_RECTS : _i >= NUMBER_OF_RECTS; rectIndex = 1 <= NUMBER_OF_RECTS ? ++_i : --_i) {
          rect = new Kinetic.Rect({
            width: 100,
            height: 100,
            fill: "rgb(" + (Math.floor(Math.random() * 256)) + ", 0, 0)",
            stroke: "black",
            strokeWidth: 4
          });
          this.registerOnClickListener(rect, this.onRectClick);
          _results.push(this._layer.add(rect));
        }
        return _results;
      };

      SimpleScreen.prototype.onRectClick = function(rect) {
        rect.setX(Math.floor(Math.random() * this.getWidth()));
        rect.setY(Math.floor(Math.random() * this.getHeight()));
        return this.redraw();
      };

      return SimpleScreen;

    })(Screen);
    return SimpleScreen;
  });

}).call(this);
